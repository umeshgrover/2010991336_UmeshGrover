import re
import random

R_EATING = "I don't like eating anything because I'm a bot obviously!"
R_ADVICE = "If I were you, I would go to the internet and type exactly what you wrote there!"


def unknown():
    response = ["Could you please re-phrase that? ",
                "I didn't get it. ",
                "Sounds about right.",
                "What does that mean?"][
        random.randrange(4)]
    return response


def message_probability(user_message, recognised_words, single_response=False, required_words=[]):
    message_certainty = 0
    has_required_words = True

    for word in user_message:
        if word in recognised_words:
            message_certainty += 1

    percentage = float(message_certainty) / float(len(recognised_words))

    for word in required_words:
        if word not in user_message:
            has_required_words = False
            break

    if has_required_words or single_response:
        return int(percentage * 100)
    else:
        return 0


def check_all_messages(message):
    highest_prob_list = {}

    def response(bot_response, list_of_words, single_response=False, required_words=[]):
        nonlocal highest_prob_list
        highest_prob_list[bot_response] = message_probability(message, list_of_words, single_response, required_words)

    response('Hello!', ['hello', 'hi', 'hey', 'sup', 'heyo'], single_response=True)
    response('See you!', ['bye', 'goodbye'], single_response=True)
    response('I\'m doing fine, and you?', ['how', 'are', 'you', 'doing'], required_words=['how'])
    response('You\'re welcome!', ['thank', 'thanks'], single_response=True)
    response('just google this one', ['how', 'can', 'i', 'code'], required_words=['code', 'how'])
    response('PowerBi, Tableau, Microsoft Excel, MySQL ', ['tools','required','for', 'data',  'analysis'], required_words=['tools','required', 'analysis'])
    response('1.Microsoft  2.Amazon  3.SuperAI ', ['top', 'three', 'companies', 'for data science'], required_words=['top', 'three'])
    response('they all are the best among the best ', ["that",'sounds', 'interesting'], required_words=['interesting','sounds'])
    response('It\'s a new Startup company \n The company aims to make humans friends with computers.\n Thus, tries to eleminates the barieer of coding languages between computers and humans and reducing the need of specialized skills or tools', ['tell','me','about'], required_words=['tell', 'me','about'])
    response('Tell me how can I help you', ['need','your','help'], required_words=['need', 'help'])
    response(R_ADVICE, ['give', 'advice'], required_words=['advice'])
    response(R_EATING, ['what', 'you', 'eat'], required_words=['you', 'eat'])

    best_match = max(highest_prob_list, key=highest_prob_list.get)


    return unknown() if highest_prob_list[best_match] < 1 else best_match

def get_response(user_input):
    split_message = re.split(r'\s+|[,;?!.-]\s*', user_input.lower())
    response = check_all_messages(split_message)
    return response
while True:
    y = input('You: ')
    if(y == 'exit' or y == 'EXIT'):
      break
    else:
      print('Bot: ' + get_response(y))
